# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

# build-client pipeline

name: $(Build.BuildId)

trigger:
  branches:
    include:
    - main
    - release/*
    - refs/tags/client_v*
  paths:
    include:
    - packages
    - components
    - examples
    - package.json
    - package-lock.json
    - lerna.json
    - lerna-package-lock.json
    - tools/build-server-resources
    - tools/pipelines/build-client.yml
    - tools/pipelines/templates/build-npm-package.yml
    - tools/pipelines/templates/include-set-package-version.yml
    - tools/pipelines/templates/publish-npm-package.yml

pr:
  branches:
    include:
    - main
    - release/*
  paths:
    include:
    - packages
    - components
    - examples
    - package.json
    - package-lock.json
    - lerna.json
    - lerna-package-lock.json
    - tools/build-server-resources
    - tools/pipelines/build-client.yml
    - tools/pipelines/templates/build-npm-package.yml
    - tools/pipelines/templates/include-set-package-version.yml

extends:
  template: templates/build-npm-package.yml
  parameters:
    buildDirectory: .
    poolBuild: Main
    cgSubDirectory: packages
    checkoutSubmodules: true
    runBundleAnalysis: true

    preCG:
    - task: UseNode@1
      displayName: Use Node 12.x
      inputs:
        version: 12.x
    - task: npmAuthenticate@0
      displayName: 'npm Authenticate root .npmrc'
      inputs:
        workingFile: .npmrc
        customEndpoint: Offnet Packages
    - task: Npm@1
      displayName: npm ci
      inputs:
        command: 'custom'
        customCommand: 'ci --ignore-scripts'
        customRegistry: 'useNpmrc'

    - task: Bash@3
      displayName: 'Generate Mono repo package json'
      inputs:
        targetType: 'inline'
        script: |
          # Generate the package/package lock for the lerna project so we would scan it.
          node node_modules/@fluidframework/build-tools/dist/genMonoRepoPackageJson/genMonoRepoPackageJson.js
          cp repo-package.json packages/package.json
          cp repo-package-lock.json packages/package-lock.json

    postBuildJobs:
    - ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
      - job: PostCheckinTests
        displayName: Run Post-Checkin Tests
        pool: Main
        steps:

        # Install
        - task: UseNode@1
          displayName: Use Node 12.x
          inputs:
            version: 12.x
        - ${{ if eq(parameters.taskAuth, true) }}:
          - task: npmAuthenticate@0
            displayName: 'npm Authenticate ${{ parameters.buildDirectory }}/.npmrc'
            inputs:
              workingFile: ${{ parameters.buildDirectory }}/.npmrc
              customEndpoint: Offnet Packages
        - ${{ if ne(parameters.extraAuth, '') }}:
          - task: npmAuthenticate@0
            displayName: 'npm Authenticate ${{ parameters.buildDirectory }}/${{ parameters.extraAuth }}/.npmrc'
            inputs:
              workingFile: ${{ parameters.buildDirectory }}/${{ parameters.extraAuth }}/.npmrc
              customEndpoint: Offnet Packages

        # TODO: Download the artifact for the built client packages from Build stage

        # Run the tests
        - task: Npm@1
          displayName: npm run ci:test:realsvc
          env:
            fluid__webpack__bearerSecret: $(fluid__webpack__bearerSecret)
            fluid__webpack__fluidHost: $(fluid__webpack__fluidHost)
            fluid__webpack__tenantId: $(fluid__webpack__tenantId)
            fluid__webpack__tenantSecret: $(fluid__webpack__tenantSecret)
          inputs:
            command: 'custom'
            workingDir: packages/test/end-to-end-tests
            customCommand: 'run ci:test:realsvc'

        # Publish the results
        - task: PublishTestResults@2
          displayName: Publish Post-Checkin Test Results
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: '**/*junit-report.xml'
            searchFolder: packages/test/end-to-end-tests/nyc-post
            mergeTestResults: true
          condition: succeededOrFailed()
